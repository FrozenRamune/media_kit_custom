import java.nio.file.Files
import java.security.MessageDigest

group 'com.alexmercerind.media_kit_libs_android_audio'
version '1.0'

buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.0'
    }
}

rootProject.allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'

android {
    compileSdkVersion 31

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 16
    }

    dependencies {
        implementation fileTree(dir: "$buildDir/output", include: "*.jar")
    }
}

task downloadDependencies(type: Exec) {
    
    // Delete previously created /output subdirectory.

    def outputDir = file("$buildDir/output")
    if (outputDir.exists()) {
        outputDir.deleteDir()
    }
    
    // Download all *.jar dependencies & verify their MD5 checksums.

    def urlARM64 = "https://github.com/media-kit/android-dependencies/releases/download/v0.0.7/audio-arm64-v8a.jar"
    def urlARMEABI = "https://github.com/media-kit/android-dependencies/releases/download/v0.0.7/audio-armeabi-v7a.jar"
    def urlX86_64 = "https://github.com/media-kit/android-dependencies/releases/download/v0.0.7/audio-x86_64.jar"
    def urlX86 = "https://github.com/media-kit/android-dependencies/releases/download/v0.0.7/audio-x86.jar"

    def urlNoFFmpegARM64 = "https://github.com/media-kit/android-dependencies/releases/download/v0.0.7/no-ffmpeg-audio-arm64-v8a.jar"
    def urlNoFFmpegARMEABI = "https://github.com/media-kit/android-dependencies/releases/download/v0.0.7/no-ffmpeg-audio-armeabi-v7a.jar"
    def urlNoFFmpegX86_64 = "https://github.com/media-kit/android-dependencies/releases/download/v0.0.7/no-ffmpeg-audio-x86_64.jar"
    def urlNoFFmpegX86 = "https://github.com/media-kit/android-dependencies/releases/download/v0.0.7/no-ffmpeg-audio-x86.jar"

    def destARM64 = file("$buildDir/v0.0.7/audio-arm64-v8a.jar")
    def destARMEABI = file("$buildDir/v0.0.7/audio-armeabi-v7a.jar")
    def destX86_64 = file("$buildDir/v0.0.7/audio-x86_64.jar")
    def destX86 = file("$buildDir/v0.0.7/audio-x86.jar")
    
    def destNoFFmpegARM64 = file("$buildDir/v0.0.7/no-ffmpeg-audio-arm64-v8a.jar")
    def destNoFFmpegARMEABI = file("$buildDir/v0.0.7/no-ffmpeg-audio-armeabi-v7a.jar")
    def destNoFFmpegX86_64 = file("$buildDir/v0.0.7/no-ffmpeg-audio-x86_64.jar")
    def destNoFFmpegX86 = file("$buildDir/v0.0.7/no-ffmpeg-audio-x86.jar")

    if (!destARM64.exists()) {
        destARM64.parentFile.mkdirs()
        destARM64.withOutputStream { os ->
            os << new URL(urlARM64).openStream()
        }
    }
    if (!destARMEABI.exists()) {
        destARMEABI.parentFile.mkdirs()
        destARMEABI.withOutputStream { os ->
            os << new URL(urlARMEABI).openStream()
        }
    }
    if (!destX86_64.exists()) {
        destX86_64.parentFile.mkdirs()
        destX86_64.withOutputStream { os ->
            os << new URL(urlX86_64).openStream()
        }
    }
    if (!destX86.exists()) {
        destX86.parentFile.mkdirs()
        destX86.withOutputStream { os ->
            os << new URL(urlX86).openStream()
        }
    }

    if (!destNoFFmpegARM64.exists()) {
        destNoFFmpegARM64.parentFile.mkdirs()
        destNoFFmpegARM64.withOutputStream { os ->
            os << new URL(urlNoFFmpegARM64).openStream()
        }
    }

    if (!destNoFFmpegARMEABI.exists()) {
        destNoFFmpegARMEABI.parentFile.mkdirs()
        destNoFFmpegARMEABI.withOutputStream { os ->
            os << new URL(urlNoFFmpegARMEABI).openStream()
        }
    }

    if (!destNoFFmpegX86_64.exists()) {
        destNoFFmpegX86_64.parentFile.mkdirs()
        destNoFFmpegX86_64.withOutputStream { os ->
            os << new URL(urlNoFFmpegX86_64).openStream()
        }
    }

    if (!destNoFFmpegX86.exists()) {
        destNoFFmpegX86.parentFile.mkdirs()
        destNoFFmpegX86.withOutputStream { os ->
            os << new URL(urlNoFFmpegX86).openStream()
        }
    }

    def md5ARM64 = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destARM64.toPath())).encodeHex().toString().toUpperCase()
    def md5ARMEABI = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destARMEABI.toPath())).encodeHex().toString().toUpperCase()
    def md5X86_64 = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destX86_64.toPath())).encodeHex().toString().toUpperCase()
    def md5X86 = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destX86.toPath())).encodeHex().toString().toUpperCase()
    
    def md5NoFFmpegARM64 = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destNoFFmpegARM64.toPath())).encodeHex().toString().toUpperCase()
    def md5NoFFmpegARMEABI = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destNoFFmpegARMEABI.toPath())).encodeHex().toString().toUpperCase()
    def md5NoFFmpegX86_64 = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destNoFFmpegX86_64.toPath())).encodeHex().toString().toUpperCase()
    def md5NoFFmpegX86 = MessageDigest.getInstance("MD5").digest(Files.readAllBytes(destNoFFmpegX86.toPath())).encodeHex().toString().toUpperCase()

    if (md5ARM64 != "F8CB746D4EFA1DD034DFB4ADECB0CFF0") {
        throw new GradleException("media_kit: arm64-v8a JAR verification failed.")
    }
    if (md5ARMEABI != "020EDD1827D968B63DC731B2AB050102") {
        throw new GradleException("media_kit: armeabi-v7a JAR verification failed.")
    }
    if (md5X86_64 != "765506FB8D857D608E8905AED4217B74") {
        throw new GradleException("media_kit: x86_64 JAR verification failed.")
    }
    if (md5X86 != "07AD9C84A316385FE4E87431AD68E78A") {
        throw new GradleException("media_kit: x86 JAR verification failed.")
    }

    if (md5NoFFmpegARM64 != "23D94BB19FA7FCA862918396A3CF5E43") {
        throw new GradleException("media_kit: arm64-v8a JAR verification failed.")
    }
    if (md5NoFFmpegARMEABI != "77EFEDD792D0FAA472E7A5437F1517B7") {
        throw new GradleException("media_kit: armeabi-v7a JAR verification failed.")
    }
    if (md5NoFFmpegX86_64 != "4872A09709E799D2F73CA698B1F78F04") {
        throw new GradleException("media_kit: x86_64 JAR verification failed.")
    }
    if (md5NoFFmpegX86 != "CEEDF2665F820331697BEBC5EA59A0D2") {
        throw new GradleException("media_kit: x86 JAR verification failed.")
    }

    // Check if package:ffmpeg_kit_flutter is present in pubspec.lock.

    def ffmpeg = false;
    def pubspec = file("$buildDir/../../pubspec.lock")
    if (!pubspec.exists()) {
        println "media_kit: WARNING: pubspec.lock not found."
    } else {
        ffmpeg = pubspec.text.contains("ffmpeg_kit_flutter")
    }
    if (ffmpeg) {
        println "media_kit: package:ffmpeg_kit_flutter found..."
        println "media_kit: Skipping FFmpeg download..."
    }

    // Create a copy of the selected *.jar files to an /output subdirectory.

    if (!ffmpeg) {
        copy {
            from destARM64
            into "$buildDir/output"
        }
        copy {
            from destARMEABI
            into "$buildDir/output"
        }
        copy {
            from destX86_64
            into "$buildDir/output"
        }
        copy {
            from destX86
            into "$buildDir/output"
        }
    } else {
        copy {
            from destNoFFmpegARM64
            into "$buildDir/output"
        }
        copy {
            from destNoFFmpegARMEABI
            into "$buildDir/output"
        }
        copy {
            from destNoFFmpegX86_64
            into "$buildDir/output"
        }
        copy {
            from destNoFFmpegX86
            into "$buildDir/output"
        }
    }
}

assemble.dependsOn(downloadDependencies)
